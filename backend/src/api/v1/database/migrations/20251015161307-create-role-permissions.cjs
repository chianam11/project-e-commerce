"use strict";

/**
 * Migration: Create "role_permissions" table
 * --------------------------------------------
 * B·∫£ng "role_permissions" l√† b·∫£ng trung gian gi·ªØa "roles" v√† "permissions"
 * ƒë·ªÉ x√°c ƒë·ªãnh quy·ªÅn c·ª• th·ªÉ m√† m·ªói vai tr√≤ (role) ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán.
 *
 * M·ªôt role c√≥ th·ªÉ c√≥ nhi·ªÅu permissions.
 * M·ªôt permission c√≥ th·ªÉ thu·ªôc v·ªÅ nhi·ªÅu roles.
 *
 * Bao g·ªìm:
 *  - Kh√≥a ngo·∫°i ƒë·∫øn roles & permissions
 *  - C√°c c·ªôt ki·ªÉm so√°t tr·∫°ng th√°i
 *  - Trigger t·ª± ƒë·ªông c·∫≠p nh·∫≠t updated_at v√† x√≥a m·ªÅm
 */

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, _Sequelize) {
    const { INTEGER, BOOLEAN, DATE } = _Sequelize;

    // =============================================
    // üß± 1Ô∏è‚É£ T·∫°o b·∫£ng role_permissions
    // =============================================
    await queryInterface.createTable("role_permissions", {
      id: {
        type: INTEGER,
        autoIncrement: true,
        primaryKey: true,
        comment: "Kh√≥a ch√≠nh",
      },
      role_id: {
        type: INTEGER,
        allowNull: false,
        comment: "ID vai tr√≤ (FK ‚Üí roles.id)",
        references: {
          model: "roles",
          key: "id",
        },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      permission_id: {
        type: INTEGER,
        allowNull: false,
        comment: "ID quy·ªÅn (FK ‚Üí permissions.id)",
        references: {
          model: "permissions",
          key: "id",
        },
        onUpdate: "CASCADE",
        onDelete: "CASCADE",
      },
      is_active: {
        type: BOOLEAN,
        allowNull: false,
        defaultValue: true,
        comment: "C·ªù k√≠ch ho·∫°t m·ªëi quan h·ªá role-permission",
      },
      is_deleted: {
        type: BOOLEAN,
        allowNull: false,
        defaultValue: false,
        comment: "C·ªù x√≥a m·ªÅm (soft delete)",
      },
      deleted_at: {
        type: DATE,
        allowNull: true,
        comment: "Th·ªùi ƒëi·ªÉm b·ªã x√≥a m·ªÅm",
      },
      created_at: {
        type: DATE,
        allowNull: false,
        defaultValue: _Sequelize.literal("NOW()"),
        comment: "Th·ªùi ƒëi·ªÉm t·∫°o b·∫£n ghi",
      },
      updated_at: {
        type: DATE,
        allowNull: false,
        defaultValue: _Sequelize.literal("NOW()"),
        comment: "Th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t b·∫£n ghi",
      },
    });

    // =============================================
    // ‚ö° 2Ô∏è‚É£ T·∫°o c√°c ch·ªâ m·ª•c (indexes)
    // =============================================
    await queryInterface.addIndex("role_permissions", ["role_id"], {
      name: "idx_role_permissions_role",
    });
    await queryInterface.addIndex("role_permissions", ["permission_id"], {
      name: "idx_role_permissions_perm",
    });
    await queryInterface.addIndex(
      "role_permissions",
      ["role_id", "permission_id"],
      {
        name: "idx_role_permissions_composite",
        unique: true,
      }
    );
    await queryInterface.addIndex("role_permissions", ["is_active"], {
      name: "idx_role_permissions_active",
    });
    await queryInterface.addIndex("role_permissions", ["is_deleted"], {
      name: "idx_role_permissions_deleted",
    });

    // =============================================
    // üß† 3Ô∏è‚É£ Trigger t·ª± ƒë·ªông c·∫≠p nh·∫≠t updated_at v√† soft delete
    // =============================================
    await queryInterface.sequelize.query(`
      -- üîÑ C·∫≠p nh·∫≠t t·ª± ƒë·ªông c·ªôt updated_at khi UPDATE
      CREATE OR REPLACE FUNCTION update_role_permissions_timestamp()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      CREATE TRIGGER trg_role_permissions_updated_at
      BEFORE UPDATE ON role_permissions
      FOR EACH ROW
      EXECUTE FUNCTION update_role_permissions_timestamp();

      -- üßπ X√≥a m·ªÅm (soft delete) thay cho DELETE th·ª±c s·ª±
      CREATE OR REPLACE FUNCTION soft_delete_role_permissions()
      RETURNS TRIGGER AS $$
      BEGIN
        UPDATE role_permissions
        SET is_deleted = TRUE,
            deleted_at = NOW()
        WHERE id = OLD.id;
        RETURN NULL; -- NgƒÉn DELETE th·ª±c t·∫ø
      END;
      $$ LANGUAGE plpgsql;

      CREATE TRIGGER trg_soft_delete_role_permissions
      BEFORE DELETE ON role_permissions
      FOR EACH ROW
      EXECUTE FUNCTION soft_delete_role_permissions();
    `);
  },

  // =============================================
  // üîô 4Ô∏è‚É£ Rollback: X√≥a trigger v√† b·∫£ng
  // =============================================
  async down(queryInterface) {
    await queryInterface.sequelize.query(`
      DROP TRIGGER IF EXISTS trg_role_permissions_updated_at ON role_permissions;
      DROP TRIGGER IF EXISTS trg_soft_delete_role_permissions ON role_permissions;
      DROP FUNCTION IF EXISTS update_role_permissions_timestamp;
      DROP FUNCTION IF EXISTS soft_delete_role_permissions;
    `);

    await queryInterface.dropTable("role_permissions");
  },
};
