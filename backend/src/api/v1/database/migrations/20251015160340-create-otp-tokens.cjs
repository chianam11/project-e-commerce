"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    // =============================================
    // üß± 1Ô∏è‚É£ T·∫°o b·∫£ng `otp_tokens`
    // =============================================
    await queryInterface.createTable("otp_tokens", {
      id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        comment: "ID c·ªßa OTP token"
      },
      user_id: {
        type: Sequelize.INTEGER,
        allowNull: true,
        comment: "ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ c√≥ t√†i kho·∫£n)"
      },
      email: {
        type: Sequelize.STRING(254),
        allowNull: false,
        comment: "Email nh·∫≠n OTP"
      },
      phone_number: {
        type: Sequelize.STRING(15),
        allowNull: true,
        comment: "S·ªë ƒëi·ªán tho·∫°i nh·∫≠n OTP"
      },
      otp_hash: {
        type: Sequelize.STRING(255),
        allowNull: false,
        comment: "Hash c·ªßa m√£ OTP (b·∫£o m·∫≠t, kh√¥ng l∆∞u OTP g·ªëc)"
      },
      token_type: {
        type: Sequelize.ENUM(
          "REGISTRATION",
          "LOGIN",
          "EMAIL_VERIFICATION",
          "PHONE_VERIFICATION",
          "PASSWORD_RESET",
          "TRANSACTION"
        ),
        allowNull: false,
        comment: "Lo·∫°i OTP (ƒëƒÉng k√Ω, login, reset password, v.v)"
      },
      is_used: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        comment: "C·ªù x√°c ƒë·ªãnh OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ch∆∞a"
      },
      is_revoked: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        comment: "C·ªù x√°c ƒë·ªãnh OTP ƒë√£ b·ªã thu h·ªìi ch∆∞a"
      },
      attempts: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 0,
        comment: "S·ªë l·∫ßn ng∆∞·ªùi d√πng ƒë√£ th·ª≠ x√°c th·ª±c OTP"
      },
      max_attempts: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 3,
        comment: "S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa ƒë∆∞·ª£c ph√©p"
      },
      ip_address: {
        type: Sequelize.STRING(45),
        allowNull: true,
        comment: "ƒê·ªãa ch·ªâ IP khi y√™u c·∫ßu OTP"
      },
      user_agent: {
        type: Sequelize.TEXT,
        allowNull: true,
        comment: "Chu·ªói User-Agent c·ªßa tr√¨nh duy·ªát / thi·∫øt b·ªã"
      },
      device_id: {
        type: Sequelize.STRING(255),
        allowNull: true,
        comment: "ID thi·∫øt b·ªã g·ª≠i y√™u c·∫ßu OTP (n·∫øu c√≥)"
      },
      expires_at: {
        type: Sequelize.DATE,
        allowNull: false,
        comment: "Th·ªùi ƒëi·ªÉm OTP h·∫øt h·∫°n"
      },
      used_at: {
        type: Sequelize.DATE,
        allowNull: true,
        comment: "Th·ªùi ƒëi·ªÉm OTP ƒë∆∞·ª£c s·ª≠ d·ª•ng (n·∫øu c√≥)"
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal("NOW()"),
        comment: "Th·ªùi ƒëi·ªÉm t·∫°o OTP"
      }
    });

    // =============================================
    // üîó 2Ô∏è‚É£ Th√™m kh√≥a ngo·∫°i (Foreign Key)
    // =============================================
    await queryInterface.addConstraint("otp_tokens", {
      fields: ["user_id"],
      type: "foreign key",
      name: "fk_otp_tokens_user",
      references: {
        table: "users",
        field: "id"
      },
      onUpdate: "CASCADE",
      onDelete: "SET NULL"
    });

    // =============================================
    // ‚ö° 3Ô∏è‚É£ T·∫°o c√°c index t·ªëi ∆∞u truy v·∫•n
    // =============================================
    await queryInterface.addIndex(
      "otp_tokens",
      ["email", "token_type", "is_used", "expires_at"],
      { name: "idx_otp_verification" }
    );

    await queryInterface.addIndex(
      "otp_tokens",
      ["phone_number", "token_type", "is_used", "expires_at"],
      { name: "idx_otp_phone_verification" }
    );

    await queryInterface.addIndex("otp_tokens", ["expires_at"], {
      name: "idx_otp_expires"
    });

    await queryInterface.addIndex("otp_tokens", ["user_id"], {
      name: "idx_otp_user"
    });

    await queryInterface.addIndex("otp_tokens", ["created_at"], {
      name: "idx_otp_created"
    });

    await queryInterface.addIndex("otp_tokens", ["email", "created_at"], {
      name: "idx_otp_email_created"
    });

    // =============================================
    // üß† 4Ô∏è‚É£ Trigger t·ª± ƒë·ªông gi·ªõi h·∫°n s·ªë l·∫ßn nh·∫≠p OTP
    // =============================================
    await queryInterface.sequelize.query(`
  CREATE OR REPLACE FUNCTION limit_otp_attempts()
  RETURNS TRIGGER AS $$
  BEGIN
    IF NEW.attempts > NEW.max_attempts THEN
      RAISE EXCEPTION 'S·ªë l·∫ßn nh·∫≠p OTP v∆∞·ª£t qu√° gi·ªõi h·∫°n (%).', NEW.max_attempts;
    END IF;
    RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;
`);

    await queryInterface.sequelize.query(`
  CREATE TRIGGER trg_limit_otp_attempts
  BEFORE UPDATE ON otp_tokens
  FOR EACH ROW
  EXECUTE FUNCTION limit_otp_attempts();
`);
  },

  // =============================================
  // üîô 5Ô∏è‚É£ Rollback: X√≥a trigger, enum, b·∫£ng
  // =============================================
  async down(queryInterface) {
    // üß© X√≥a trigger
    await queryInterface.sequelize.query(`
    DROP TRIGGER IF EXISTS trg_limit_otp_attempts ON otp_tokens;
  `);

    // üß© X√≥a function
    await queryInterface.sequelize.query(`
    DROP FUNCTION IF EXISTS limit_otp_attempts();
  `);

    // üß© X√≥a b·∫£ng
    await queryInterface.dropTable("otp_tokens");

    // üß© X√≥a ENUM type (n·∫øu c√≥)
    await queryInterface.sequelize.query(`
    DROP TYPE IF EXISTS "enum_otp_tokens_token_type";
  `);
  }
};
